***Directory Tree***:
[{'path': '', 'files': [], 'dirs': ['model']}, {'path': 'model', 'files': ['rotated_vq.py'], 'dirs': []}]

***Code Contents***:
[{'path': 'model\\rotated_vq.py', 'content': 'import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\n\nclass VectorQuantizer(nn.Module):\n    """\n    Vector Quantization layer with rotation transformation\n    """\n    def __init__(self, num_embeddings, embedding_dim, commitment_cost=0.25, use_rotation=True, ema_decay=0.99):\n        super(VectorQuantizer, self).__init__()\n        \n        self.num_embeddings = num_embeddings\n        self.embedding_dim = embedding_dim\n        self.commitment_cost = commitment_cost\n        self.use_rotation = use_rotation\n        self.ema_decay = ema_decay\n        self.use_ema = ema_decay > 0\n        \n        # Initialize embeddings\n        self.embedding = nn.Embedding(self.num_embeddings, self.embedding_dim)\n        self.embedding.weight.data.uniform_(-1.0 / self.num_embeddings, 1.0 / self.num_embeddings)\n        \n        # EMA related variables\n        if self.use_ema:\n            self.register_buffer(\'ema_cluster_size\', torch.zeros(num_embeddings))\n            self.register_buffer(\'ema_w\', self.embedding.weight.data.clone())\n    \n    def compute_rotation_matrix(self, z_e, q):\n        """\n        Compute the rotation matrix that aligns z_e with q\n        """\n        # Normalize vectors\n        z_e_norm = F.normalize(z_e, dim=-1)\n        q_norm = F.normalize(q, dim=-1)\n        \n        # Compute the rotation matrix using Householder transformation\n        v = z_e_norm - q_norm\n        v_norm = torch.norm(v, dim=-1, keepdim=True)\n        mask = (v_norm > 1e-5).float()\n        v = mask * v / (v_norm + 1e-8) + (1 - mask) * v\n        \n        # Householder matrix: I - 2 * v * v^T\n        I = torch.eye(self.embedding_dim, device=z_e.device)\n        rotation_matrix = I - 2 * torch.bmm(v.unsqueeze(-1), v.unsqueeze(-2))\n        \n        return rotation_matrix\n    \n    def forward(self, z_e):\n        """\n        Inputs:\n        - z_e: output of encoder [B, D]\n        \n        Returns:\n        - q: quantized vectors [B, D]\n        - loss: commitment loss\n        - perplexity: measure of codebook usage\n        - encodings: one-hot encodings of quantized vectors\n        """\n        # Reshape input\n        z_e_flat = z_e.view(-1, self.embedding_dim)\n        \n        # Compute distances\n        distances = torch.sum(z_e_flat ** 2, dim=1, keepdim=True) + \\\n                    torch.sum(self.embedding.weight ** 2, dim=1) - \\\n                    2 * torch.matmul(z_e_flat, self.embedding.weight.t())\n        \n        # Find nearest embedding\n        encoding_indices = torch.argmin(distances, dim=1)\n        encodings = F.one_hot(encoding_indices, self.num_embeddings).float()\n        \n        # Quantize\n        quantized = self.embedding(encoding_indices)\n        \n        # Apply rotation if enabled\n        if self.use_rotation:\n            # Compute rotation matrices for each vector\n            rotation_matrices = self.compute_rotation_matrix(z_e_flat, quantized)\n            \n            # Apply rotation to z_e\n            rotated_z_e = torch.bmm(rotation_matrices, z_e_flat.unsqueeze(-1)).squeeze(-1)\n            \n            # Use rotated z_e for decoder, but keep original quantized for loss\n            q_out = rotated_z_e\n        else:\n            # Standard VQ-VAE: use quantized vectors\n            q_out = quantized\n        \n        # Compute loss\n        q_latent_loss = F.mse_loss(q_out.detach(), z_e_flat)\n        e_latent_loss = F.mse_loss(q_out, z_e_flat.detach())\n        loss = q_latent_loss + self.commitment_cost * e_latent_loss\n        \n        # Update embeddings with EMA\n        if self.training and self.use_ema:\n            self.ema_cluster_size = self.ema_decay * self.ema_cluster_size + \\\n                                   (1 - self.ema_decay) * torch.sum(encodings, dim=0)\n            \n            # Laplace smoothing\n            n = torch.sum(self.ema_cluster_size)\n            self.ema_cluster_size = ((self.ema_cluster_size + 1e-5) / \n                                    (n + self.num_embeddings * 1e-5) * n)\n            \n            # Update weights\n            dw = torch.matmul(encodings.t(), z_e_flat)\n            self.ema_w = self.ema_decay * self.ema_w + (1 - self.ema_decay) * dw\n            \n            # Normalize weights\n            self.embedding.weight.data = self.ema_w / self.ema_cluster_size.unsqueeze(1)\n        \n        # Straight-through estimator\n        q_out = z_e_flat + (q_out - z_e_flat).detach()\n        \n        # Reshape to match input\n        q_out = q_out.view(z_e.shape)\n        \n        # Calculate perplexity (measure of codebook usage)\n        avg_probs = torch.mean(encodings, dim=0)\n        perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))\n        \n        return q_out, loss, perplexity, encoding_indices\n\nclass Encoder(nn.Module):\n    """\n    Encoder network for VQ-VAE\n    """\n    def __init__(self, in_channels, hidden_dims, embedding_dim):\n        super(Encoder, self).__init__()\n        \n        modules = []\n        for h_dim in hidden_dims:\n            modules.append(\n                nn.Sequential(\n                    nn.Conv2d(in_channels, h_dim, kernel_size=4, stride=2, padding=1),\n                    nn.BatchNorm2d(h_dim),\n                    nn.LeakyReLU(0.2)\n                )\n            )\n            in_channels = h_dim\n        \n        modules.append(\n            nn.Sequential(\n                nn.Conv2d(hidden_dims[-1], embedding_dim, kernel_size=1, stride=1),\n                nn.BatchNorm2d(embedding_dim),\n                nn.LeakyReLU(0.2)\n            )\n        )\n        \n        self.encoder = nn.Sequential(*modules)\n    \n    def forward(self, x):\n        return self.encoder(x)\n\nclass Decoder(nn.Module):\n    """\n    Decoder network for VQ-VAE\n    """\n    def __init__(self, embedding_dim, hidden_dims, out_channels):\n        super(Decoder, self).__init__()\n        \n        hidden_dims = hidden_dims[::-1]  # Reverse for decoder\n        modules = []\n        \n        modules.append(\n            nn.Sequential(\n                nn.Conv2d(embedding_dim, hidden_dims[0], kernel_size=1, stride=1),\n                nn.BatchNorm2d(hidden_dims[0]),\n                nn.LeakyReLU(0.2)\n            )\n        )\n        \n        for i in range(len(hidden_dims) - 1):\n            modules.append(\n                nn.Sequential(\n                    nn.ConvTranspose2d(hidden_dims[i], hidden_dims[i + 1], \n                                      kernel_size=4, stride=2, padding=1),\n                    nn.BatchNorm2d(hidden_dims[i + 1]),\n                    nn.LeakyReLU(0.2)\n                )\n            )\n        \n        modules.append(\n            nn.Sequential(\n                nn.ConvTranspose2d(hidden_dims[-1], out_channels, \n                                  kernel_size=4, stride=2, padding=1),\n                nn.Tanh()\n            )\n        )\n        \n        self.decoder = nn.Sequential(*modules)\n    \n    def forward(self, x):\n        return self.decoder(x)\n\nclass RotatedVQVAE(nn.Module):\n    """\n    Complete VQ-VAE model with rotation-based vector quantization\n    """\n    def __init__(self, in_channels=3, hidden_dims=[64, 128, 256], \n                 embedding_dim=256, num_embeddings=8192, \n                 commitment_cost=0.25, use_rotation=True, ema_decay=0.99):\n        super(RotatedVQVAE, self).__init__()\n        \n        self.encoder = Encoder(in_channels, hidden_dims, embedding_dim)\n        self.vector_quantizer = VectorQuantizer(num_embeddings, embedding_dim, \n                                               commitment_cost, use_rotation, ema_decay)\n        self.decoder = Decoder(embedding_dim, hidden_dims, in_channels)\n    \n    def forward(self, x):\n        z_e = self.encoder(x)\n        \n        # Permute for vector quantizer\n        z_e = z_e.permute(0, 2, 3, 1).contiguous()\n        \n        # Quantize\n        shape = z_e.shape\n        z_e_flat = z_e.view(-1, shape[-1])\n        q_flat, vq_loss, perplexity, encoding_indices = self.vector_quantizer(z_e_flat)\n        q = q_flat.view(shape)\n        \n        # Permute back for decoder\n        q = q.permute(0, 3, 1, 2).contiguous()\n        \n        # Decode\n        reconstructions = self.decoder(q)\n        \n        return reconstructions, vq_loss, perplexity, encoding_indices '}]